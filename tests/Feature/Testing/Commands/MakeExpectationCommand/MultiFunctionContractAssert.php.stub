<?php

declare(strict_types=1);

namespace Tests\LaraStrict\Feature\Testing\Commands\MakeExpectationCommand;

use PHPUnit\Framework\Assert;

class MultiFunctionContractAssert extends \LaraStrict\Testing\Assert\AbstractExpectationCallsMap implements MultiFunctionContract
{
    /**
     * @param array<MultiFunctionContractSelfExpectation|null> $self
     * @param array<MultiFunctionContractPhpDocThisExpectation|null> $phpDocThis
     * @param array<MultiFunctionContractPhpDocThisParamsExpectation|null> $phpDocThisParams
     * @param array<MultiFunctionContractPhpDocBoolExpectation|null> $phpDocBool
     * @param array<MultiFunctionContractPhpDocStringExpectation|null> $phpDocString
     * @param array<MultiFunctionContractPhpDocFloatExpectation|null> $phpDocFloat
     * @param array<MultiFunctionContractPhpDocMixedExpectation|null> $phpDocMixed
     * @param array<MultiFunctionContractPhpDocStaticExpectation|null> $phpDocStatic
     * @param array<MultiFunctionContractSelfViaClassExpectation|null> $selfViaClass
     * @param array<MultiFunctionContractNoReturnExpectation|null> $noReturn
     * @param array<MultiFunctionContractMixedExpectation|null> $mixed
     * @param array<MultiFunctionContractNoParamsExpectation|null> $noParams
     */
    function __construct(
        array $self = [],
        array $phpDocThis = [],
        array $phpDocThisParams = [],
        array $phpDocBool = [],
        array $phpDocString = [],
        array $phpDocFloat = [],
        array $phpDocMixed = [],
        array $phpDocStatic = [],
        array $selfViaClass = [],
        array $noReturn = [],
        array $mixed = [],
        array $noParams = [],
    ) {
        parent::__construct();
        $this->setExpectations(MultiFunctionContractSelfExpectation::class, $self);
        $this->setExpectations(MultiFunctionContractPhpDocThisExpectation::class, $phpDocThis);
        $this->setExpectations(MultiFunctionContractPhpDocThisParamsExpectation::class, $phpDocThisParams);
        $this->setExpectations(MultiFunctionContractPhpDocBoolExpectation::class, $phpDocBool);
        $this->setExpectations(MultiFunctionContractPhpDocStringExpectation::class, $phpDocString);
        $this->setExpectations(MultiFunctionContractPhpDocFloatExpectation::class, $phpDocFloat);
        $this->setExpectations(MultiFunctionContractPhpDocMixedExpectation::class, $phpDocMixed);
        $this->setExpectations(MultiFunctionContractPhpDocStaticExpectation::class, $phpDocStatic);
        $this->setExpectations(MultiFunctionContractSelfViaClassExpectation::class, $selfViaClass);
        $this->setExpectations(MultiFunctionContractNoReturnExpectation::class, $noReturn);
        $this->setExpectations(MultiFunctionContractMixedExpectation::class, $mixed);
        $this->setExpectations(MultiFunctionContractNoParamsExpectation::class, $noParams);
    }

    function self(string $first, int $second, bool $third): self
    {
        $_expectation = $this->getExpectation(MultiFunctionContractSelfExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $this;
    }

    /**
     * @return $this
     */
    function phpDocThis(string $first, int $second, bool $third)
    {
        $_expectation = $this->getExpectation(MultiFunctionContractPhpDocThisExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $this;
    }

    /**
     * @param string $first
     * @param int    $second
     * @param bool   $second
     *
     * @return $this
     */
    function phpDocThisParams($first, $second, $third)
    {
        $_expectation = $this->getExpectation(MultiFunctionContractPhpDocThisParamsExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $this;
    }

    /**
     * @return bool
     */
    function phpDocBool($first, $second, callable $third)
    {
        $_expectation = $this->getExpectation(MultiFunctionContractPhpDocBoolExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $_expectation->return;
    }

    /**
     * @return string
     */
    function phpDocString($first, $second, $third)
    {
        $_expectation = $this->getExpectation(MultiFunctionContractPhpDocStringExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $_expectation->return;
    }

    /**
     * @return float
     */
    function phpDocFloat($first, $second, $third)
    {
        $_expectation = $this->getExpectation(MultiFunctionContractPhpDocFloatExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $_expectation->return;
    }

    /**
     * @return mixed
     */
    function phpDocMixed($first, $second, $third)
    {
        $_expectation = $this->getExpectation(MultiFunctionContractPhpDocMixedExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $_expectation->return;
    }

    /**
     * @return static
     */
    function phpDocStatic($first, $second, $third)
    {
        $_expectation = $this->getExpectation(MultiFunctionContractPhpDocStaticExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $this;
    }

    /**
     * @return MultiFunctionContract
     */
    function selfViaClass($first, $second, $third)
    {
        $_expectation = $this->getExpectation(MultiFunctionContractSelfViaClassExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $_expectation->return;
    }

    function noReturn($first, $second, $third)
    {
        $_expectation = $this->getExpectation(MultiFunctionContractNoReturnExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }
    }

    function mixed($first, $second, $third): mixed
    {
        $_expectation = $this->getExpectation(MultiFunctionContractMixedExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->first, $first, $_message);
        Assert::assertEquals($_expectation->second, $second, $_message);
        Assert::assertEquals($_expectation->third, $third, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $first, $second, $third, $_expectation);
        }

        return $_expectation->return;
    }

    function noParams(): string
    {
        $_expectation = $this->getExpectation(MultiFunctionContractNoParamsExpectation::class);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $_expectation);
        }

        return $_expectation->return;
    }
}
