<?php

declare(strict_types=1);

namespace App\Tests\LaraStrict\Feature\Testing\Commands\MakeExpectationCommand;

use PHPUnit\Framework\Assert;

class TestReturnUnionActionContractAssert extends \LaraStrict\Testing\Assert\AbstractExpectationCallsMap implements \Tests\LaraStrict\Feature\Testing\Commands\MakeExpectationCommand\TestReturnUnionActionContract
{
    /**
     * @param array<TestReturnUnionActionContractExpectation|null> $execute
     */
    function __construct(array $execute = [])
    {
        parent::__construct();
        $this->setExpectations(TestReturnUnionActionContractExpectation::class, $execute);
    }

    function execute(
        int $int,
        string $string,
        $noTypeHint,
        \LaraStrict\Enums\EnvironmentType $type,
        \LaraStrict\Testing\Laravel\TestingApplication $testingApplication,
        string|int $multi,
        string|int|null $multiNull,
        string|int|null $multiNullDefault = 'test',
        string $optional = null,
        string $optionalString = 'test',
        string $constant = DIRECTORY_SEPARATOR,
        int $constantClass = \LaraStrict\Cache\Constants\CacheExpirations::HalfDay,
        \LaraStrict\Enums\EnvironmentType $enumDefault = \LaraStrict\Enums\EnvironmentType::Testing,
        $noTypeHintDefault = null,
        string $customConstants = \Tests\LaraStrict\Feature\Testing\Commands\MakeExpectationCommand\Constants\CustomConstants::TEST,
        \LaraStrict\Testing\Laravel\TestingApplication $object = new \LaraStrict\Testing\Laravel\TestingApplication(/* unknown */),
        \ArrayAccess&\Illuminate\Support\Enumerable $intersectionType = new \Illuminate\Support\Collection(/* unknown */),
    ): \LaraStrict\Testing\Laravel\TestingApplication|string|int|null {
        $_expectation = $this->getExpectation(TestReturnUnionActionContractExpectation::class);
        $_message = $this->getDebugMessage();

        Assert::assertEquals($_expectation->int, $int, $_message);
        Assert::assertEquals($_expectation->string, $string, $_message);
        Assert::assertEquals($_expectation->noTypeHint, $noTypeHint, $_message);
        Assert::assertEquals($_expectation->type, $type, $_message);
        Assert::assertEquals($_expectation->testingApplication, $testingApplication, $_message);
        Assert::assertEquals($_expectation->multi, $multi, $_message);
        Assert::assertEquals($_expectation->multiNull, $multiNull, $_message);
        Assert::assertEquals($_expectation->multiNullDefault, $multiNullDefault, $_message);
        Assert::assertEquals($_expectation->optional, $optional, $_message);
        Assert::assertEquals($_expectation->optionalString, $optionalString, $_message);
        Assert::assertEquals($_expectation->constant, $constant, $_message);
        Assert::assertEquals($_expectation->constantClass, $constantClass, $_message);
        Assert::assertEquals($_expectation->enumDefault, $enumDefault, $_message);
        Assert::assertEquals($_expectation->noTypeHintDefault, $noTypeHintDefault, $_message);
        Assert::assertEquals($_expectation->customConstants, $customConstants, $_message);
        Assert::assertEquals($_expectation->object, $object, $_message);
        Assert::assertEquals($_expectation->intersectionType, $intersectionType, $_message);

        if (is_callable($_expectation->_hook)) {
            call_user_func($_expectation->_hook, $int, $string, $noTypeHint, $type, $testingApplication, $multi, $multiNull, $multiNullDefault, $optional, $optionalString, $constant, $constantClass, $enumDefault, $noTypeHintDefault, $customConstants, $object, $intersectionType, $_expectation);
        }

        return $_expectation->return;
    }
}
