#!/usr/bin/env php
<?php

use Illuminate\Foundation\PackageManifest;
use LaraStrict\Testing\Actions\GetDevBasePathForAssertsAction;
use LaraStrict\Testing\Actions\GetDevBasePathForStubs;
use LaraStrict\Testing\Actions\GetDevNamespaceForStubsAction;
use LaraStrict\Testing\Contracts\GetBasePathForAssertsActionContract;
use LaraStrict\Testing\Contracts\GetBasePathForStubsActionContract;
use LaraStrict\Testing\Contracts\GetNamespaceForStubsActionContract;

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any our classes "manually". Feels great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/vendor/orchestra/testbench-core/laravel/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

/** @var \Illuminate\Contracts\Foundation\Application $app */

// Load our package providers

/** @var PackageManifest $packageManifest */
$packageManifest = $app->make(PackageManifest::class);

foreach ($packageManifest->providers() as $provider) {
    $app->register($provider);
}

$app->register(\LaraStrict\Core\LaraStrictServiceProvider::class);

$app->bind(GetBasePathForStubsActionContract::class, GetDevBasePathForStubs::class);
$app->bind(GetBasePathForAssertsActionContract::class, GetDevBasePathForAssertsAction::class);
$app->bind(GetNamespaceForStubsActionContract::class, GetDevNamespaceForStubsAction::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);
